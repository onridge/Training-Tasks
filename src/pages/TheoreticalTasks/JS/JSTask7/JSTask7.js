import React from 'react';
import Layout from '../../../../components/Layout/Layout';

export default function JSTask7() {
    return (
        <Layout>
            <div>
                <h3> Как реализовано наследование в JS? отличия от других языков? </h3>
            </div>
            <label>
                В JS прототипное наследование, при котором у объекта есть __proto__, а у функции-конструктора - prototype.
                Наследование в JS реализовано в качестве цепочки прототипов. По сути у каждого объекта есть внутренняя
                ссылка на другой объект. Цепочка прототипов длится до тех пор пока цепочка не достигнет объекта с
                прототипом null. Поиск необходимого метода или свойства также происходит по цепочке, проверяется сперва
                у себя в прототипе, потом у родителя и так до самого null если метод или свойство отсутствует.
                <br /> Также с таким подходом можно переопределять какие-либо методы, т.к. следуя по цепочке прототипов
                в поисках метода он будет найден раньше, чем дойдет до объекта у которого может быть этот метод.
                <br /> Основное отличие с другими языками в том, что в JS объекты наследуются от объектов без классов и
                без глубокой вложенности абстракций, как это происходит при классическом наследовании.
                <br /> В JS есть возможность использовать классы, однако это синтаксический сахар над прототипным наследованием.
            </label>
        </Layout>
    )
}
