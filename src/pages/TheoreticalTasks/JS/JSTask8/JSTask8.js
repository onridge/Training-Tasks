import React from 'react';
import Layout from '../../../../components/Layout/Layout';
import ElementList from '../../../../components/ElementList/ElementList';

export default function JSTask8() {
    return (
        <Layout>
            <div>
                <h3> Общие вопросы </h3>
            </div>
            <ul>
                <ElementList description='React'>
                    React - это библиотека, главной особеностью которой является использование VirtualDOM. React испольузется
                    для создания компонентов пользовательского интерфейса. Также в React представлена передача данных в
                    одну сторону, передача состояния или пропсов от родительского компонента в дочернии.
                </ElementList>
                <ElementList description='Redux'>
                    Redux - это хранилище состояний, единственный источник правды. Главной его особеностью является то, что
                    в отличии от Flux у Redux - 1 стор, у Flux их может быть несколько, и Flux является архитектурой, а
                    Redux - подходом. Также стор нельзя изменять напрямую, необходимо использовать экшены, которые
                    представлены в виде объекта и далее экшены обрабатываются функцией редюсером, после чего изменяется
                    состояние в сторе.
                </ElementList>
                <ElementList description='ООП'>
                    ООП - это парадигма программирования, которая включает в себя такие принципы как: Абстракция, Полиморфизм,
                    Наследования, Инкапсуляция. Основной концепцией в ООП являются объекты и классы.
                </ElementList>
                <ElementList description='Функциональное программирование'>
                    Функциональное програмиирование - это подход при котором во главе стоят функции. Он наследует такие
                    принципы как: Чистая функция, Функция высшего порядка, Композиция, Мемоизация, Каррирование, Частичное
                    применение функции
                </ElementList>
                <ElementList description='Замыкание'>
                    Замыкание - это способность функции получать доступ к переменным, которые находятся вне её лексического
                    окружения.
                </ElementList>
                <ElementList description='Hoisting'>
                    Всплытие - это всплытие переменных и функций наверх своей области видимости. При этом функциональные
                    выражения не всплывают, так же как и перемененные объявлены при помощи let и const. Однако при
                    использовании let может быть вызвана "Временная мертвая зона" - это момент, когда память была
                    выделана для этой переменной, однако переменная была объявлена позже.
                </ElementList>
                <ElementList description='Иммутабельность'>
                    Иммутабельность - это объект или массив, состояние которого никогда не изменится после создания. Суть
                    заключается в том, чтобы при изменении исходного объекта, всегда возращать новый объект с новыми полями,
                    а не мутировать исходный.
                </ElementList>
                <ElementList description='Прототип'>
                    Прототип - это объект, который хранит в себе методы и свойства и так же ссылку на прототип родителя.
                    Наследование реализуется по цепочке прототипов.
                </ElementList>
                <ElementList description='Отличие __proto__ от prototype'>
                    Основное отличие в том, что __proto__ - есть у объекта, а prototype - у функции-конструктора.
                </ElementList>
                <ElementList description='this'>
                    this - контекст вызова. Указывает на объект в котором был вызван.
                </ElementList>
            </ul>
        </Layout>
    )
}
